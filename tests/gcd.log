   1: program GCD; 
Parser:   <program>
   2: /* A program to compute the {greatest common} of two numbers, 
   3:    i.e., the biggest number by which the two original 
   4:    numbers can be divided without a remainder. */ 
   5:  
   6: const v1 = 1071; v2 = 462; 
Parser:     <block>
Parser:       <const decl part>
Parser:         <const decl>
Parser:           <constant>
Parser:             <unsigned constant>
Parser:               <number literal>
Parser:               </number literal>
Parser:             </unsigned constant>
Parser:           </constant>
Parser:         </const decl>
Parser:         <const decl>
Parser:           <constant>
Parser:             <unsigned constant>
Parser:               <number literal>
   7:  
   8: var res: integer; 
Parser:               </number literal>
Parser:             </unsigned constant>
Parser:           </constant>
Parser:         </const decl>
Parser:       </const decl part>
Parser:       <var decl part>
Parser:         <var decl>
Parser:           <type>
Parser:             <name type>
   9:  
  10: function GCD (m: integer; n: integer): integer; 
Parser:             </name type>
Parser:           </type>
Parser:         </var decl>
Parser:       </var decl part>
Parser:       <func decl>
Parser:         <param decl list>
Parser:           <param decl>
Parser:             <type>
Parser:               <name type>
Parser:               </name type>
Parser:             </type>
Parser:           </param decl>
Parser:           <param decl>
Parser:             <type>
Parser:               <name type>
Parser:               </name type>
Parser:             </type>
Parser:           </param decl>
Parser:         </param decl list>
Parser:         <type>
Parser:           <name type>
  11: begin 
Parser:           </name type>
Parser:         </type>
  12:    if n = 0 then 
Parser:         <block>
Parser:           <statm list>
Parser:             <statement>
Parser:               <if statm>
Parser:                 <expression>
Parser:                   <simple expr>
Parser:                     <term>
Parser:                       <factor>
Parser:                         <unsigned constant>
Parser:                           <namedconst>
Parser:                           </namedconst>
Parser:                         </unsigned constant>
Parser:                       </factor>
Parser:                     </term>
Parser:                   </simple expr>
Parser:                   <RelOperator>
Parser:                   </RelOperator>
Parser:                   <simple expr>
Parser:                     <term>
Parser:                       <factor>
Parser:                         <unsigned constant>
Parser:                           <number literal>
  13:       GCD := m 
Parser:                           </number literal>
Parser:                         </unsigned constant>
Parser:                       </factor>
Parser:                     </term>
Parser:                   </simple expr>
Parser:                 </expression>
Parser:                 <statement>
Parser:                   <assign statm>
Parser:                     <variable>
Parser:                     </variable>
  14:    else 
Parser:                     <expression>
Parser:                       <simple expr>
Parser:                         <term>
Parser:                           <factor>
Parser:                             <unsigned constant>
Parser:                               <namedconst>
  15:       GCD := GCD(n, m mod n) 
Parser:                               </namedconst>
Parser:                             </unsigned constant>
Parser:                           </factor>
Parser:                         </term>
Parser:                       </simple expr>
Parser:                     </expression>
Parser:                   </assign statm>
Parser:                 </statement>
Parser:                 <statement>
Parser:                   <assign statm>
Parser:                     <variable>
Parser:                     </variable>
Parser:                     <expression>
Parser:                       <simple expr>
Parser:                         <term>
Parser:                           <factor>
Parser:                             <funccall>
Parser:                               <expression>
Parser:                                 <simple expr>
Parser:                                   <term>
Parser:                                     <factor>
Parser:                                       <unsigned constant>
Parser:                                         <namedconst>
Parser:                                         </namedconst>
Parser:                                       </unsigned constant>
Parser:                                     </factor>
Parser:                                   </term>
Parser:                                 </simple expr>
Parser:                               </expression>
Parser:                               <expression>
Parser:                                 <simple expr>
Parser:                                   <term>
Parser:                                     <factor>
Parser:                                       <unsigned constant>
Parser:                                         <charliteral>
Error in line 15: Expected a char but found a ,!
