   1: /* Test program 'easter' 
   2:                 ======== 
   3:    Computes Easter Sunday for the years 2010-2020. 
   4: */ 
   5:  
   6: program Easter; 
Parser:   <program>
   7:  
   8: var y: integer; 
Parser:     <block>
Parser:       <var decl part>
Parser:         <var decl>
Parser:           <type>
Parser:             <name type>
   9:  
  10: procedure easter (y: integer); 
Parser:             </name type>
Parser:           </type>
Parser:         </var decl>
Parser:       </var decl part>
Parser:       <proc decl>
Parser:         <param decl list>
Parser:           <param decl>
Parser:             <name type>
Parser:             </name type>
Parser:           </param decl>
  11: var 
Parser:         </param decl list>
  12:    a: integer;  b: integer;  c: integer;  d: integer;  e: integer; 
Parser:         <block>
Parser:           <var decl part>
Parser:             <var decl>
Parser:               <type>
Parser:                 <name type>
Parser:                 </name type>
Parser:               </type>
Parser:             </var decl>
Parser:             <var decl>
Parser:               <type>
Parser:                 <name type>
Parser:                 </name type>
Parser:               </type>
Parser:             </var decl>
Parser:             <var decl>
Parser:               <type>
Parser:                 <name type>
Parser:                 </name type>
Parser:               </type>
Parser:             </var decl>
Parser:             <var decl>
Parser:               <type>
Parser:                 <name type>
Parser:                 </name type>
Parser:               </type>
Parser:             </var decl>
Parser:             <var decl>
Parser:               <type>
Parser:                 <name type>
  13:    f: integer;  g: integer;  h: integer;  i: integer;  k: integer; 
Parser:                 </name type>
Parser:               </type>
Parser:             </var decl>
Parser:             <var decl>
Parser:               <type>
Parser:                 <name type>
Parser:                 </name type>
Parser:               </type>
Parser:             </var decl>
Parser:             <var decl>
Parser:               <type>
Parser:                 <name type>
Parser:                 </name type>
Parser:               </type>
Parser:             </var decl>
Parser:             <var decl>
Parser:               <type>
Parser:                 <name type>
Parser:                 </name type>
Parser:               </type>
Parser:             </var decl>
Parser:             <var decl>
Parser:               <type>
Parser:                 <name type>
Parser:                 </name type>
Parser:               </type>
Parser:             </var decl>
Parser:             <var decl>
Parser:               <type>
Parser:                 <name type>
  14:    l: integer;  m: integer; 
Parser:                 </name type>
Parser:               </type>
Parser:             </var decl>
Parser:             <var decl>
Parser:               <type>
Parser:                 <name type>
Parser:                 </name type>
Parser:               </type>
Parser:             </var decl>
Parser:             <var decl>
Parser:               <type>
Parser:                 <name type>
  15:  
  16:    month: integer;  /* The date of Easter Sunday */ 
Parser:                 </name type>
Parser:               </type>
Parser:             </var decl>
Parser:             <var decl>
Parser:               <type>
Parser:                 <name type>
  17:    day: integer; 
Parser:                 </name type>
Parser:               </type>
Parser:             </var decl>
Parser:             <var decl>
Parser:               <type>
Parser:                 <name type>
  18:  
  19:    ix: integer; 
Parser:                 </name type>
Parser:               </type>
Parser:             </var decl>
Parser:             <var decl>
Parser:               <type>
Parser:                 <name type>
  20: begin 
Parser:                 </name type>
Parser:               </type>
  21:    a := y mod 19; 
Parser:             </var decl>
Parser:           </var decl part>
Parser:           <statm list>
Parser:             <statement>
Parser:               <assign statm>
Parser:                 <variable>
Parser:                 </variable>
Parser:                 <expression>
Parser:                   <simple expr>
Parser:                     <term>
Parser:                       <factor>
Parser:                         <variable>
Parser:                         </variable>
Parser:                       </factor>
Parser:                       <factor-operator>
Parser:                       </factor-operator>
Parser:                       <factor>
Parser:                         <unsigned constant>
Parser:                           <number literal>
  22:    b := y div 100; 
Parser:                           </number literal>
Parser:                         </unsigned constant>
Parser:                       </factor>
Parser:                     </term>
Parser:                   </simple expr>
Parser:                 </expression>
Parser:               </assign statm>
Parser:             </statement>
Parser:             <statement>
Parser:               <assign statm>
Parser:                 <variable>
Parser:                 </variable>
Parser:                 <expression>
Parser:                   <simple expr>
Parser:                     <term>
Parser:                       <factor>
Parser:                         <variable>
Parser:                         </variable>
Parser:                       </factor>
Parser:                       <factor-operator>
Parser:                       </factor-operator>
Parser:                       <factor>
Parser:                         <unsigned constant>
Parser:                           <number literal>
  23:    c := y mod 100; 
Parser:                           </number literal>
Parser:                         </unsigned constant>
Parser:                       </factor>
Parser:                     </term>
Parser:                   </simple expr>
Parser:                 </expression>
Parser:               </assign statm>
Parser:             </statement>
Parser:             <statement>
Parser:               <assign statm>
Parser:                 <variable>
Parser:                 </variable>
Parser:                 <expression>
Parser:                   <simple expr>
Parser:                     <term>
Parser:                       <factor>
Parser:                         <variable>
Parser:                         </variable>
Parser:                       </factor>
Parser:                       <factor-operator>
Parser:                       </factor-operator>
Parser:                       <factor>
Parser:                         <unsigned constant>
Parser:                           <number literal>
  24:    d := b div 4; 
Parser:                           </number literal>
Parser:                         </unsigned constant>
Parser:                       </factor>
Parser:                     </term>
Parser:                   </simple expr>
Parser:                 </expression>
Parser:               </assign statm>
Parser:             </statement>
Parser:             <statement>
Parser:               <assign statm>
Parser:                 <variable>
Parser:                 </variable>
Parser:                 <expression>
Parser:                   <simple expr>
Parser:                     <term>
Parser:                       <factor>
Parser:                         <variable>
Parser:                         </variable>
Parser:                       </factor>
Parser:                       <factor-operator>
Parser:                       </factor-operator>
Parser:                       <factor>
Parser:                         <unsigned constant>
Parser:                           <number literal>
  25:    e := b mod 4; 
Parser:                           </number literal>
Parser:                         </unsigned constant>
Parser:                       </factor>
Parser:                     </term>
Parser:                   </simple expr>
Parser:                 </expression>
Parser:               </assign statm>
Parser:             </statement>
Parser:             <statement>
Parser:               <assign statm>
Parser:                 <variable>
Parser:                 </variable>
Parser:                 <expression>
Parser:                   <simple expr>
Parser:                     <term>
Parser:                       <factor>
Parser:                         <variable>
Parser:                         </variable>
Parser:                       </factor>
Parser:                       <factor-operator>
Parser:                       </factor-operator>
Parser:                       <factor>
Parser:                         <unsigned constant>
Parser:                           <number literal>
  26:    f := (b+8) div 25; 
Parser:                           </number literal>
Parser:                         </unsigned constant>
Parser:                       </factor>
Parser:                     </term>
Parser:                   </simple expr>
Parser:                 </expression>
Parser:               </assign statm>
Parser:             </statement>
Parser:             <statement>
Parser:               <assign statm>
Parser:                 <variable>
Parser:                 </variable>
Parser:                 <expression>
Parser:                   <simple expr>
Parser:                     <term>
Parser:                       <factor>
Parser:                         <innerexpr>
Parser:                           <expression>
Parser:                             <simple expr>
Parser:                               <term>
Parser:                                 <factor>
Parser:                                   <variable>
Parser:                                   </variable>
Parser:                                 </factor>
Parser:                               </term>
Parser:                               <TermOperator>
Parser:                               </TermOperator>
Parser:                               <term>
Parser:                                 <factor>
Parser:                                   <unsigned constant>
Parser:                                     <number literal>
Parser:                                     </number literal>
Parser:                                   </unsigned constant>
Parser:                                 </factor>
Parser:                               </term>
Parser:                             </simple expr>
Parser:                           </expression>
Parser:                         </innerexpr>
Parser:                       </factor>
Parser:                       <factor-operator>
Parser:                       </factor-operator>
Parser:                       <factor>
Parser:                         <unsigned constant>
Parser:                           <number literal>
  27:    g := (b-f+1) div 3; 
Parser:                           </number literal>
Parser:                         </unsigned constant>
Parser:                       </factor>
Parser:                     </term>
Parser:                   </simple expr>
Parser:                 </expression>
Parser:               </assign statm>
Parser:             </statement>
Parser:             <statement>
Parser:               <assign statm>
Parser:                 <variable>
Parser:                 </variable>
Parser:                 <expression>
Parser:                   <simple expr>
Parser:                     <term>
Parser:                       <factor>
Parser:                         <innerexpr>
Parser:                           <expression>
Parser:                             <simple expr>
Parser:                               <term>
Parser:                                 <factor>
Parser:                                   <variable>
Parser:                                   </variable>
Parser:                                 </factor>
Parser:                               </term>
Parser:                               <TermOperator>
Parser:                               </TermOperator>
Parser:                               <term>
Parser:                                 <factor>
Parser:                                   <variable>
Parser:                                   </variable>
Parser:                                 </factor>
Parser:                               </term>
Parser:                               <TermOperator>
Parser:                               </TermOperator>
Parser:                               <term>
Parser:                                 <factor>
Parser:                                   <unsigned constant>
Parser:                                     <number literal>
Parser:                                     </number literal>
Parser:                                   </unsigned constant>
Parser:                                 </factor>
Parser:                               </term>
Parser:                             </simple expr>
Parser:                           </expression>
Parser:                         </innerexpr>
Parser:                       </factor>
Parser:                       <factor-operator>
Parser:                       </factor-operator>
Parser:                       <factor>
Parser:                         <unsigned constant>
Parser:                           <number literal>
  28:    h := (19*a+b-d-g+15) mod 30; 
Parser:                           </number literal>
Parser:                         </unsigned constant>
Parser:                       </factor>
Parser:                     </term>
Parser:                   </simple expr>
Parser:                 </expression>
Parser:               </assign statm>
Parser:             </statement>
Parser:             <statement>
Parser:               <assign statm>
Parser:                 <variable>
Parser:                 </variable>
Parser:                 <expression>
Parser:                   <simple expr>
Parser:                     <term>
Parser:                       <factor>
Parser:                         <innerexpr>
Parser:                           <expression>
Parser:                             <simple expr>
Parser:                               <term>
Parser:                                 <factor>
Parser:                                   <unsigned constant>
Parser:                                     <number literal>
Parser:                                     </number literal>
Parser:                                   </unsigned constant>
Parser:                                 </factor>
Parser:                                 <factor-operator>
Parser:                                 </factor-operator>
Parser:                                 <factor>
Parser:                                   <variable>
Parser:                                   </variable>
Parser:                                 </factor>
Parser:                               </term>
Parser:                               <TermOperator>
Parser:                               </TermOperator>
Parser:                               <term>
Parser:                                 <factor>
Parser:                                   <variable>
Parser:                                   </variable>
Parser:                                 </factor>
Parser:                               </term>
Parser:                               <TermOperator>
Parser:                               </TermOperator>
Parser:                               <term>
Parser:                                 <factor>
Parser:                                   <variable>
Parser:                                   </variable>
Parser:                                 </factor>
Parser:                               </term>
Parser:                               <TermOperator>
Parser:                               </TermOperator>
Parser:                               <term>
Parser:                                 <factor>
Parser:                                   <variable>
Parser:                                   </variable>
Parser:                                 </factor>
Parser:                               </term>
Parser:                               <TermOperator>
Parser:                               </TermOperator>
Parser:                               <term>
Parser:                                 <factor>
Parser:                                   <unsigned constant>
Parser:                                     <number literal>
Parser:                                     </number literal>
Parser:                                   </unsigned constant>
Parser:                                 </factor>
Parser:                               </term>
Parser:                             </simple expr>
Parser:                           </expression>
Parser:                         </innerexpr>
Parser:                       </factor>
Parser:                       <factor-operator>
Parser:                       </factor-operator>
Parser:                       <factor>
Parser:                         <unsigned constant>
Parser:                           <number literal>
  29:    i := c div 4; 
Parser:                           </number literal>
Parser:                         </unsigned constant>
Parser:                       </factor>
Parser:                     </term>
Parser:                   </simple expr>
Parser:                 </expression>
Parser:               </assign statm>
Parser:             </statement>
Parser:             <statement>
Parser:               <assign statm>
Parser:                 <variable>
Parser:                 </variable>
Parser:                 <expression>
Parser:                   <simple expr>
Parser:                     <term>
Parser:                       <factor>
Parser:                         <variable>
Parser:                         </variable>
Parser:                       </factor>
Parser:                       <factor-operator>
Parser:                       </factor-operator>
Parser:                       <factor>
Parser:                         <unsigned constant>
Parser:                           <number literal>
  30:    k := c mod 4; 
Parser:                           </number literal>
Parser:                         </unsigned constant>
Parser:                       </factor>
Parser:                     </term>
Parser:                   </simple expr>
Parser:                 </expression>
Parser:               </assign statm>
Parser:             </statement>
Parser:             <statement>
Parser:               <assign statm>
Parser:                 <variable>
Parser:                 </variable>
Parser:                 <expression>
Parser:                   <simple expr>
Parser:                     <term>
Parser:                       <factor>
Parser:                         <variable>
Parser:                         </variable>
Parser:                       </factor>
Parser:                       <factor-operator>
Parser:                       </factor-operator>
Parser:                       <factor>
Parser:                         <unsigned constant>
Parser:                           <number literal>
  31:    l := (32+2*e+2*i-h-k) mod 7; 
Parser:                           </number literal>
Parser:                         </unsigned constant>
Parser:                       </factor>
Parser:                     </term>
Parser:                   </simple expr>
Parser:                 </expression>
Parser:               </assign statm>
Parser:             </statement>
Parser:             <statement>
Parser:               <assign statm>
Parser:                 <variable>
Parser:                 </variable>
Parser:                 <expression>
Parser:                   <simple expr>
Parser:                     <term>
Parser:                       <factor>
Parser:                         <innerexpr>
Parser:                           <expression>
Parser:                             <simple expr>
Parser:                               <term>
Parser:                                 <factor>
Parser:                                   <unsigned constant>
Parser:                                     <number literal>
Parser:                                     </number literal>
Parser:                                   </unsigned constant>
Parser:                                 </factor>
Parser:                               </term>
Parser:                               <TermOperator>
Parser:                               </TermOperator>
Parser:                               <term>
Parser:                                 <factor>
Parser:                                   <unsigned constant>
Parser:                                     <number literal>
Parser:                                     </number literal>
Parser:                                   </unsigned constant>
Parser:                                 </factor>
Parser:                                 <factor-operator>
Parser:                                 </factor-operator>
Parser:                                 <factor>
Parser:                                   <variable>
Parser:                                   </variable>
Parser:                                 </factor>
Parser:                               </term>
Parser:                               <TermOperator>
Parser:                               </TermOperator>
Parser:                               <term>
Parser:                                 <factor>
Parser:                                   <unsigned constant>
Parser:                                     <number literal>
Parser:                                     </number literal>
Parser:                                   </unsigned constant>
Parser:                                 </factor>
Parser:                                 <factor-operator>
Parser:                                 </factor-operator>
Parser:                                 <factor>
Parser:                                   <variable>
Parser:                                   </variable>
Parser:                                 </factor>
Parser:                               </term>
Parser:                               <TermOperator>
Parser:                               </TermOperator>
Parser:                               <term>
Parser:                                 <factor>
Parser:                                   <variable>
Parser:                                   </variable>
Parser:                                 </factor>
Parser:                               </term>
Parser:                               <TermOperator>
Parser:                               </TermOperator>
Parser:                               <term>
Parser:                                 <factor>
Parser:                                   <variable>
Parser:                                   </variable>
Parser:                                 </factor>
Parser:                               </term>
Parser:                             </simple expr>
Parser:                           </expression>
Parser:                         </innerexpr>
Parser:                       </factor>
Parser:                       <factor-operator>
Parser:                       </factor-operator>
Parser:                       <factor>
Parser:                         <unsigned constant>
Parser:                           <number literal>
  32:    m := (a+11*h+22*l) div 451; 
Parser:                           </number literal>
Parser:                         </unsigned constant>
Parser:                       </factor>
Parser:                     </term>
Parser:                   </simple expr>
Parser:                 </expression>
Parser:               </assign statm>
Parser:             </statement>
Parser:             <statement>
Parser:               <assign statm>
Parser:                 <variable>
Parser:                 </variable>
Parser:                 <expression>
Parser:                   <simple expr>
Parser:                     <term>
Parser:                       <factor>
Parser:                         <innerexpr>
Parser:                           <expression>
Parser:                             <simple expr>
Parser:                               <term>
Parser:                                 <factor>
Parser:                                   <variable>
Parser:                                   </variable>
Parser:                                 </factor>
Parser:                               </term>
Parser:                               <TermOperator>
Parser:                               </TermOperator>
Parser:                               <term>
Parser:                                 <factor>
Parser:                                   <unsigned constant>
Parser:                                     <number literal>
Parser:                                     </number literal>
Parser:                                   </unsigned constant>
Parser:                                 </factor>
Parser:                                 <factor-operator>
Parser:                                 </factor-operator>
Parser:                                 <factor>
Parser:                                   <variable>
Parser:                                   </variable>
Parser:                                 </factor>
Parser:                               </term>
Parser:                               <TermOperator>
Parser:                               </TermOperator>
Parser:                               <term>
Parser:                                 <factor>
Parser:                                   <unsigned constant>
Parser:                                     <number literal>
Parser:                                     </number literal>
Parser:                                   </unsigned constant>
Parser:                                 </factor>
Parser:                                 <factor-operator>
Parser:                                 </factor-operator>
Parser:                                 <factor>
Parser:                                   <variable>
Parser:                                   </variable>
Parser:                                 </factor>
Parser:                               </term>
Parser:                             </simple expr>
Parser:                           </expression>
Parser:                         </innerexpr>
Parser:                       </factor>
Parser:                       <factor-operator>
Parser:                       </factor-operator>
Parser:                       <factor>
Parser:                         <unsigned constant>
Parser:                           <number literal>
  33:  
  34:    month := (h+l-7*m+114) div 31; 
Parser:                           </number literal>
Parser:                         </unsigned constant>
Parser:                       </factor>
Parser:                     </term>
Parser:                   </simple expr>
Parser:                 </expression>
Parser:               </assign statm>
Parser:             </statement>
Parser:             <statement>
Parser:               <assign statm>
Parser:                 <variable>
Parser:                 </variable>
Parser:                 <expression>
Parser:                   <simple expr>
Parser:                     <term>
Parser:                       <factor>
Parser:                         <innerexpr>
Parser:                           <expression>
Parser:                             <simple expr>
Parser:                               <term>
Parser:                                 <factor>
Parser:                                   <variable>
Parser:                                   </variable>
Parser:                                 </factor>
Parser:                               </term>
Parser:                               <TermOperator>
Parser:                               </TermOperator>
Parser:                               <term>
Parser:                                 <factor>
Parser:                                   <variable>
Parser:                                   </variable>
Parser:                                 </factor>
Parser:                               </term>
Parser:                               <TermOperator>
Parser:                               </TermOperator>
Parser:                               <term>
Parser:                                 <factor>
Parser:                                   <unsigned constant>
Parser:                                     <number literal>
Parser:                                     </number literal>
Parser:                                   </unsigned constant>
Parser:                                 </factor>
Parser:                                 <factor-operator>
Parser:                                 </factor-operator>
Parser:                                 <factor>
Parser:                                   <variable>
Parser:                                   </variable>
Parser:                                 </factor>
Parser:                               </term>
Parser:                               <TermOperator>
Parser:                               </TermOperator>
Parser:                               <term>
Parser:                                 <factor>
Parser:                                   <unsigned constant>
Parser:                                     <number literal>
Parser:                                     </number literal>
Parser:                                   </unsigned constant>
Parser:                                 </factor>
Parser:                               </term>
Parser:                             </simple expr>
Parser:                           </expression>
Parser:                         </innerexpr>
Parser:                       </factor>
Parser:                       <factor-operator>
Parser:                       </factor-operator>
Parser:                       <factor>
Parser:                         <unsigned constant>
Parser:                           <number literal>
  35:    day := (h+l-7*m+114) mod 31 + 1; 
Parser:                           </number literal>
Parser:                         </unsigned constant>
Parser:                       </factor>
Parser:                     </term>
Parser:                   </simple expr>
Parser:                 </expression>
Parser:               </assign statm>
Parser:             </statement>
Parser:             <statement>
Parser:               <assign statm>
Parser:                 <variable>
Parser:                 </variable>
Parser:                 <expression>
Parser:                   <simple expr>
Parser:                     <term>
Parser:                       <factor>
Parser:                         <innerexpr>
Parser:                           <expression>
Parser:                             <simple expr>
Parser:                               <term>
Parser:                                 <factor>
Parser:                                   <variable>
Parser:                                   </variable>
Parser:                                 </factor>
Parser:                               </term>
Parser:                               <TermOperator>
Parser:                               </TermOperator>
Parser:                               <term>
Parser:                                 <factor>
Parser:                                   <variable>
Parser:                                   </variable>
Parser:                                 </factor>
Parser:                               </term>
Parser:                               <TermOperator>
Parser:                               </TermOperator>
Parser:                               <term>
Parser:                                 <factor>
Parser:                                   <unsigned constant>
Parser:                                     <number literal>
Parser:                                     </number literal>
Parser:                                   </unsigned constant>
Parser:                                 </factor>
Parser:                                 <factor-operator>
Parser:                                 </factor-operator>
Parser:                                 <factor>
Parser:                                   <variable>
Parser:                                   </variable>
Parser:                                 </factor>
Parser:                               </term>
Parser:                               <TermOperator>
Parser:                               </TermOperator>
Parser:                               <term>
Parser:                                 <factor>
Parser:                                   <unsigned constant>
Parser:                                     <number literal>
Parser:                                     </number literal>
Parser:                                   </unsigned constant>
Parser:                                 </factor>
Parser:                               </term>
Parser:                             </simple expr>
Parser:                           </expression>
Parser:                         </innerexpr>
Parser:                       </factor>
Parser:                       <factor-operator>
Parser:                       </factor-operator>
Parser:                       <factor>
Parser:                         <unsigned constant>
Parser:                           <number literal>
Parser:                           </number literal>
Parser:                         </unsigned constant>
Parser:                       </factor>
Parser:                     </term>
Parser:                     <TermOperator>
Parser:                     </TermOperator>
Parser:                     <term>
Parser:                       <factor>
Parser:                         <unsigned constant>
Parser:                           <number literal>
  36:  
  37:    if month = 3 then 
Parser:                           </number literal>
Parser:                         </unsigned constant>
Parser:                       </factor>
Parser:                     </term>
Parser:                   </simple expr>
Parser:                 </expression>
Parser:               </assign statm>
Parser:             </statement>
Parser:             <statement>
Parser:               <if statm>
Parser:                 <expression>
Parser:                   <simple expr>
Parser:                     <term>
Parser:                       <factor>
Parser:                         <variable>
Parser:                         </variable>
Parser:                       </factor>
Parser:                     </term>
Parser:                   </simple expr>
Parser:                   <RelOperator>
Parser:                   </RelOperator>
Parser:                   <simple expr>
Parser:                     <term>
Parser:                       <factor>
Parser:                         <unsigned constant>
Parser:                           <number literal>
  38:       write(day, ' ', 'M', 'a', 'r', 'c', 'h', ' ', y, eol) 
Parser:                           </number literal>
Parser:                         </unsigned constant>
Parser:                       </factor>
Parser:                     </term>
Parser:                   </simple expr>
Parser:                 </expression>
Parser:                 <statement>
Parser:                   <proc call>
Parser:                     <expression>
Parser:                       <simple expr>
Parser:                         <term>
Parser:                           <factor>
Parser:                             <variable>
Parser:                             </variable>
Parser:                           </factor>
Parser:                         </term>
Parser:                       </simple expr>
Parser:                     </expression>
Parser:                     <expression>
Parser:                       <simple expr>
Parser:                         <term>
Parser:                           <factor>
Parser:                             <unsigned constant>
Parser:                               <charliteral>
Parser:                               </charliteral>
Parser:                             </unsigned constant>
Parser:                           </factor>
Parser:                         </term>
Parser:                       </simple expr>
Parser:                     </expression>
Parser:                     <expression>
Parser:                       <simple expr>
Parser:                         <term>
Parser:                           <factor>
Parser:                             <unsigned constant>
Parser:                               <charliteral>
Parser:                               </charliteral>
Parser:                             </unsigned constant>
Parser:                           </factor>
Parser:                         </term>
Parser:                       </simple expr>
Parser:                     </expression>
Parser:                     <expression>
Parser:                       <simple expr>
Parser:                         <term>
Parser:                           <factor>
Parser:                             <unsigned constant>
Parser:                               <charliteral>
Parser:                               </charliteral>
Parser:                             </unsigned constant>
Parser:                           </factor>
Parser:                         </term>
Parser:                       </simple expr>
Parser:                     </expression>
Parser:                     <expression>
Parser:                       <simple expr>
Parser:                         <term>
Parser:                           <factor>
Parser:                             <unsigned constant>
Parser:                               <charliteral>
Parser:                               </charliteral>
Parser:                             </unsigned constant>
Parser:                           </factor>
Parser:                         </term>
Parser:                       </simple expr>
Parser:                     </expression>
Parser:                     <expression>
Parser:                       <simple expr>
Parser:                         <term>
Parser:                           <factor>
Parser:                             <unsigned constant>
Parser:                               <charliteral>
Parser:                               </charliteral>
Parser:                             </unsigned constant>
Parser:                           </factor>
Parser:                         </term>
Parser:                       </simple expr>
Parser:                     </expression>
Parser:                     <expression>
Parser:                       <simple expr>
Parser:                         <term>
Parser:                           <factor>
Parser:                             <unsigned constant>
Parser:                               <charliteral>
Parser:                               </charliteral>
Parser:                             </unsigned constant>
Parser:                           </factor>
Parser:                         </term>
Parser:                       </simple expr>
Parser:                     </expression>
Parser:                     <expression>
Parser:                       <simple expr>
Parser:                         <term>
Parser:                           <factor>
Parser:                             <unsigned constant>
Parser:                               <charliteral>
Parser:                               </charliteral>
Parser:                             </unsigned constant>
Parser:                           </factor>
Parser:                         </term>
Parser:                       </simple expr>
Parser:                     </expression>
Parser:                     <expression>
Parser:                       <simple expr>
Parser:                         <term>
Parser:                           <factor>
Parser:                             <variable>
Parser:                             </variable>
Parser:                           </factor>
Parser:                         </term>
Parser:                       </simple expr>
Parser:                     </expression>
Parser:                     <expression>
Parser:                       <simple expr>
Parser:                         <term>
Parser:                           <factor>
Parser:                             <variable>
  39:    else 
Parser:                             </variable>
Parser:                           </factor>
Parser:                         </term>
Parser:                       </simple expr>
Parser:                     </expression>
  40:       write(day, ' ', 'A', 'p', 'r', 'i', 'l', ' ', y, eol); 
Parser:                   </proc call>
Parser:                 </statement>
Parser:                 <statement>
Parser:                   <proc call>
Parser:                     <expression>
Parser:                       <simple expr>
Parser:                         <term>
Parser:                           <factor>
Parser:                             <variable>
Parser:                             </variable>
Parser:                           </factor>
Parser:                         </term>
Parser:                       </simple expr>
Parser:                     </expression>
Parser:                     <expression>
Parser:                       <simple expr>
Parser:                         <term>
Parser:                           <factor>
Parser:                             <unsigned constant>
Parser:                               <charliteral>
Parser:                               </charliteral>
Parser:                             </unsigned constant>
Parser:                           </factor>
Parser:                         </term>
Parser:                       </simple expr>
Parser:                     </expression>
Parser:                     <expression>
Parser:                       <simple expr>
Parser:                         <term>
Parser:                           <factor>
Parser:                             <unsigned constant>
Parser:                               <charliteral>
Parser:                               </charliteral>
Parser:                             </unsigned constant>
Parser:                           </factor>
Parser:                         </term>
Parser:                       </simple expr>
Parser:                     </expression>
Parser:                     <expression>
Parser:                       <simple expr>
Parser:                         <term>
Parser:                           <factor>
Parser:                             <unsigned constant>
Parser:                               <charliteral>
Parser:                               </charliteral>
Parser:                             </unsigned constant>
Parser:                           </factor>
Parser:                         </term>
Parser:                       </simple expr>
Parser:                     </expression>
Parser:                     <expression>
Parser:                       <simple expr>
Parser:                         <term>
Parser:                           <factor>
Parser:                             <unsigned constant>
Parser:                               <charliteral>
Parser:                               </charliteral>
Parser:                             </unsigned constant>
Parser:                           </factor>
Parser:                         </term>
Parser:                       </simple expr>
Parser:                     </expression>
Parser:                     <expression>
Parser:                       <simple expr>
Parser:                         <term>
Parser:                           <factor>
Parser:                             <unsigned constant>
Parser:                               <charliteral>
Parser:                               </charliteral>
Parser:                             </unsigned constant>
Parser:                           </factor>
Parser:                         </term>
Parser:                       </simple expr>
Parser:                     </expression>
Parser:                     <expression>
Parser:                       <simple expr>
Parser:                         <term>
Parser:                           <factor>
Parser:                             <unsigned constant>
Parser:                               <charliteral>
Parser:                               </charliteral>
Parser:                             </unsigned constant>
Parser:                           </factor>
Parser:                         </term>
Parser:                       </simple expr>
Parser:                     </expression>
Parser:                     <expression>
Parser:                       <simple expr>
Parser:                         <term>
Parser:                           <factor>
Parser:                             <unsigned constant>
Parser:                               <charliteral>
Parser:                               </charliteral>
Parser:                             </unsigned constant>
Parser:                           </factor>
Parser:                         </term>
Parser:                       </simple expr>
Parser:                     </expression>
Parser:                     <expression>
Parser:                       <simple expr>
Parser:                         <term>
Parser:                           <factor>
Parser:                             <variable>
Parser:                             </variable>
Parser:                           </factor>
Parser:                         </term>
Parser:                       </simple expr>
Parser:                     </expression>
Parser:                     <expression>
Parser:                       <simple expr>
Parser:                         <term>
Parser:                           <factor>
Parser:                             <variable>
Parser:                             </variable>
Parser:                           </factor>
Parser:                         </term>
Parser:                       </simple expr>
Parser:                     </expression>
  41: end; {easter} 
Parser:                   </proc call>
Parser:                 </statement>
Parser:               </if statm>
Parser:             </statement>
Parser:             <statement>
Parser:               <empty statm>
Parser:               </empty statm>
Parser:             </statement>
Parser:           </statm list>
  42:  
  43: begin 
Parser:         </block>
  44:    y := 2010; 
Parser:       </Proc decl>
Parser:       <statm list>
Parser:         <statement>
Parser:           <assign statm>
Parser:             <variable>
Parser:             </variable>
Parser:             <expression>
Parser:               <simple expr>
Parser:                 <term>
Parser:                   <factor>
Parser:                     <unsigned constant>
Parser:                       <number literal>
  45:    while y <= 2020 do 
Parser:                       </number literal>
Parser:                     </unsigned constant>
Parser:                   </factor>
Parser:                 </term>
Parser:               </simple expr>
Parser:             </expression>
Parser:           </assign statm>
Parser:         </statement>
Parser:         <statement>
Parser:           <while-statm>
Parser:             <expression>
Parser:               <simple expr>
Parser:                 <term>
Parser:                   <factor>
Parser:                     <variable>
Parser:                     </variable>
Parser:                   </factor>
Parser:                 </term>
Parser:               </simple expr>
Parser:               <RelOperator>
Parser:               </RelOperator>
Parser:               <simple expr>
Parser:                 <term>
Parser:                   <factor>
Parser:                     <unsigned constant>
Parser:                       <number literal>
  46:    begin 
Parser:                       </number literal>
Parser:                     </unsigned constant>
Parser:                   </factor>
Parser:                 </term>
Parser:               </simple expr>
Parser:             </expression>
  47:       easter(y);  y := y + 1; 
Parser:             <statement>
Parser:               <CompoundStatm>
Parser:                 <statm list>
Parser:                   <statement>
Parser:                     <proc call>
Parser:                       <expression>
Parser:                         <simple expr>
Parser:                           <term>
Parser:                             <factor>
Parser:                               <variable>
Parser:                               </variable>
Parser:                             </factor>
Parser:                           </term>
Parser:                         </simple expr>
Parser:                       </expression>
Parser:                     </proc call>
Parser:                   </statement>
Parser:                   <statement>
Parser:                     <assign statm>
Parser:                       <variable>
Parser:                       </variable>
Parser:                       <expression>
Parser:                         <simple expr>
Parser:                           <term>
Parser:                             <factor>
Parser:                               <variable>
Parser:                               </variable>
Parser:                             </factor>
Parser:                           </term>
Parser:                           <TermOperator>
Parser:                           </TermOperator>
Parser:                           <term>
Parser:                             <factor>
Parser:                               <unsigned constant>
Parser:                                 <number literal>
  48:    end 
Parser:                                 </number literal>
Parser:                               </unsigned constant>
Parser:                             </factor>
Parser:                           </term>
Parser:                         </simple expr>
Parser:                       </expression>
Parser:                     </assign statm>
Parser:                   </statement>
  49: end. 
Parser:                   <statement>
Parser:                     <empty statm>
Parser:                     </empty statm>
Parser:                   </statement>
Parser:                 </statm list>
Parser:               </CompoundStatm>
Parser:             </statement>
Parser:           </while-statm>
Parser:         </statement>
Parser:       </statm list>
Parser:     </block>
Parser:   </program>
