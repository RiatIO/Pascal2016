   1: program OperatorTest; 
Scanner: program token on line 1
Scanner: name token on line 1: operatortest
Scanner: ; token on line 1
   2:  
   3:  
   4: procedure TestUnaryBoolean; 
Scanner: procedure token on line 4
Scanner: name token on line 4: testunaryboolean
Scanner: ; token on line 4
   5:  
   6:    procedure Test (x: boolean); 
Scanner: procedure token on line 6
Scanner: name token on line 6: test
Scanner: ( token on line 6
Scanner: name token on line 6: x
Scanner: : token on line 6
Scanner: name token on line 6: boolean
Scanner: ) token on line 6
Scanner: ; token on line 6
   7:    begin 
Scanner: begin token on line 7
   8:       write('n', 'o', 't', ' ', x, ' ', '=', ' ', not x, eol); 
Scanner: name token on line 8: write
Scanner: ( token on line 8
Scanner: char token on line 8: 'n'
Scanner: , token on line 8
Scanner: char token on line 8: 'o'
Scanner: , token on line 8
Scanner: char token on line 8: 't'
Scanner: , token on line 8
Scanner: char token on line 8: ' '
Scanner: , token on line 8
Scanner: name token on line 8: x
Scanner: , token on line 8
Scanner: char token on line 8: ' '
Scanner: , token on line 8
Scanner: char token on line 8: '='
Scanner: , token on line 8
Scanner: char token on line 8: ' '
Scanner: , token on line 8
Scanner: not token on line 8
Scanner: name token on line 8: x
Scanner: , token on line 8
Scanner: name token on line 8: eol
Scanner: ) token on line 8
Scanner: ; token on line 8
   9:    end; { Test } 
Scanner: end token on line 9
Scanner: ; token on line 9
  10:  
  11: begin 
Scanner: begin token on line 11
  12:    Test(false);  Test(true); 
Scanner: name token on line 12: test
Scanner: ( token on line 12
Scanner: name token on line 12: false
Scanner: ) token on line 12
Scanner: ; token on line 12
Scanner: name token on line 12: test
Scanner: ( token on line 12
Scanner: name token on line 12: true
Scanner: ) token on line 12
Scanner: ; token on line 12
  13: end; { TestUnaryBoolean } 
Scanner: end token on line 13
Scanner: ; token on line 13
  14:  
  15:  
  16: procedure TestBinaryBoolean; 
Scanner: procedure token on line 16
Scanner: name token on line 16: testbinaryboolean
Scanner: ; token on line 16
  17:  
  18:    procedure Test (x: boolean;  y: boolean); 
Scanner: procedure token on line 18
Scanner: name token on line 18: test
Scanner: ( token on line 18
Scanner: name token on line 18: x
Scanner: : token on line 18
Scanner: name token on line 18: boolean
Scanner: ; token on line 18
Scanner: name token on line 18: y
Scanner: : token on line 18
Scanner: name token on line 18: boolean
Scanner: ) token on line 18
Scanner: ; token on line 18
  19:    begin 
Scanner: begin token on line 19
  20:       write(x, ' ', 'a', 'n', 'd', ' ', y, ' ', '=', ' ', x and y, eol); 
Scanner: name token on line 20: write
Scanner: ( token on line 20
Scanner: name token on line 20: x
Scanner: , token on line 20
Scanner: char token on line 20: ' '
Scanner: , token on line 20
Scanner: char token on line 20: 'a'
Scanner: , token on line 20
Scanner: char token on line 20: 'n'
Scanner: , token on line 20
Scanner: char token on line 20: 'd'
Scanner: , token on line 20
Scanner: char token on line 20: ' '
Scanner: , token on line 20
Scanner: name token on line 20: y
Scanner: , token on line 20
Scanner: char token on line 20: ' '
Scanner: , token on line 20
Scanner: char token on line 20: '='
Scanner: , token on line 20
Scanner: char token on line 20: ' '
Scanner: , token on line 20
Scanner: name token on line 20: x
Scanner: and token on line 20
Scanner: name token on line 20: y
Scanner: , token on line 20
Scanner: name token on line 20: eol
Scanner: ) token on line 20
Scanner: ; token on line 20
  21:       write(x, ' ', 'o', 'r', ' ', y, ' ', '=', ' ', x or y, eol); 
Scanner: name token on line 21: write
Scanner: ( token on line 21
Scanner: name token on line 21: x
Scanner: , token on line 21
Scanner: char token on line 21: ' '
Scanner: , token on line 21
Scanner: char token on line 21: 'o'
Scanner: , token on line 21
Scanner: char token on line 21: 'r'
Scanner: , token on line 21
Scanner: char token on line 21: ' '
Scanner: , token on line 21
Scanner: name token on line 21: y
Scanner: , token on line 21
Scanner: char token on line 21: ' '
Scanner: , token on line 21
Scanner: char token on line 21: '='
Scanner: , token on line 21
Scanner: char token on line 21: ' '
Scanner: , token on line 21
Scanner: name token on line 21: x
Scanner: or token on line 21
Scanner: name token on line 21: y
Scanner: , token on line 21
Scanner: name token on line 21: eol
Scanner: ) token on line 21
Scanner: ; token on line 21
  22:    end; { Test } 
Scanner: end token on line 22
Scanner: ; token on line 22
  23:  
  24: begin 
Scanner: begin token on line 24
  25:    Test(false, false);  Test(false, true); 
Scanner: name token on line 25: test
Scanner: ( token on line 25
Scanner: name token on line 25: false
Scanner: , token on line 25
Scanner: name token on line 25: false
Scanner: ) token on line 25
Scanner: ; token on line 25
Scanner: name token on line 25: test
Scanner: ( token on line 25
Scanner: name token on line 25: false
Scanner: , token on line 25
Scanner: name token on line 25: true
Scanner: ) token on line 25
Scanner: ; token on line 25
  26:    Test(true, false);  Test(true, true); 
Scanner: name token on line 26: test
Scanner: ( token on line 26
Scanner: name token on line 26: true
Scanner: , token on line 26
Scanner: name token on line 26: false
Scanner: ) token on line 26
Scanner: ; token on line 26
Scanner: name token on line 26: test
Scanner: ( token on line 26
Scanner: name token on line 26: true
Scanner: , token on line 26
Scanner: name token on line 26: true
Scanner: ) token on line 26
Scanner: ; token on line 26
  27: end; { TestBinaryBoolean } 
Scanner: end token on line 27
Scanner: ; token on line 27
  28:  
  29:  
  30: procedure TestUnaryNumeric; 
Scanner: procedure token on line 30
Scanner: name token on line 30: testunarynumeric
Scanner: ; token on line 30
  31:  
  32:    procedure Test (x: integer); 
Scanner: procedure token on line 32
Scanner: name token on line 32: test
Scanner: ( token on line 32
Scanner: name token on line 32: x
Scanner: : token on line 32
Scanner: name token on line 32: integer
Scanner: ) token on line 32
Scanner: ; token on line 32
  33:    begin 
Scanner: begin token on line 33
  34:       write('-', ' ', x, ' ', '=', ' ', -x, eol); 
Scanner: name token on line 34: write
Scanner: ( token on line 34
Scanner: char token on line 34: '-'
Scanner: , token on line 34
Scanner: char token on line 34: ' '
Scanner: , token on line 34
Scanner: name token on line 34: x
Scanner: , token on line 34
Scanner: char token on line 34: ' '
Scanner: , token on line 34
Scanner: char token on line 34: '='
Scanner: , token on line 34
Scanner: char token on line 34: ' '
Scanner: , token on line 34
Scanner: - token on line 34
Scanner: name token on line 34: x
Scanner: , token on line 34
Scanner: name token on line 34: eol
Scanner: ) token on line 34
Scanner: ; token on line 34
  35:       write('+', ' ', x, ' ', '=', ' ', +x, eol); 
Scanner: name token on line 35: write
Scanner: ( token on line 35
Scanner: char token on line 35: '+'
Scanner: , token on line 35
Scanner: char token on line 35: ' '
Scanner: , token on line 35
Scanner: name token on line 35: x
Scanner: , token on line 35
Scanner: char token on line 35: ' '
Scanner: , token on line 35
Scanner: char token on line 35: '='
Scanner: , token on line 35
Scanner: char token on line 35: ' '
Scanner: , token on line 35
Scanner: + token on line 35
Scanner: name token on line 35: x
Scanner: , token on line 35
Scanner: name token on line 35: eol
Scanner: ) token on line 35
Scanner: ; token on line 35
  36:    end; { Test } 
Scanner: end token on line 36
Scanner: ; token on line 36
  37:  
  38: begin 
Scanner: begin token on line 38
  39:    Test(17);  Test(-11);  Test(0); 
Scanner: name token on line 39: test
Scanner: ( token on line 39
Scanner: number token on line 39: 17
Scanner: ) token on line 39
Scanner: ; token on line 39
Scanner: name token on line 39: test
Scanner: ( token on line 39
Scanner: - token on line 39
Scanner: number token on line 39: 11
Scanner: ) token on line 39
Scanner: ; token on line 39
Scanner: name token on line 39: test
Scanner: ( token on line 39
Scanner: number token on line 39: 0
Scanner: ) token on line 39
Scanner: ; token on line 39
  40: end; { TestUnaryNumeric } 
Scanner: end token on line 40
Scanner: ; token on line 40
  41:  
  42:  
  43: procedure TestBinaryNumeric; 
Scanner: procedure token on line 43
Scanner: name token on line 43: testbinarynumeric
Scanner: ; token on line 43
  44:  
  45:    procedure Test (x: integer;  y: integer); 
Scanner: procedure token on line 45
Scanner: name token on line 45: test
Scanner: ( token on line 45
Scanner: name token on line 45: x
Scanner: : token on line 45
Scanner: name token on line 45: integer
Scanner: ; token on line 45
Scanner: name token on line 45: y
Scanner: : token on line 45
Scanner: name token on line 45: integer
Scanner: ) token on line 45
Scanner: ; token on line 45
  46:    begin 
Scanner: begin token on line 46
  47:       write(x, ' ', '+', ' ', y, ' ', '=', ' ', x + y, eol); 
Scanner: name token on line 47: write
Scanner: ( token on line 47
Scanner: name token on line 47: x
Scanner: , token on line 47
Scanner: char token on line 47: ' '
Scanner: , token on line 47
Scanner: char token on line 47: '+'
Scanner: , token on line 47
Scanner: char token on line 47: ' '
Scanner: , token on line 47
Scanner: name token on line 47: y
Scanner: , token on line 47
Scanner: char token on line 47: ' '
Scanner: , token on line 47
Scanner: char token on line 47: '='
Scanner: , token on line 47
Scanner: char token on line 47: ' '
Scanner: , token on line 47
Scanner: name token on line 47: x
Scanner: + token on line 47
Scanner: name token on line 47: y
Scanner: , token on line 47
Scanner: name token on line 47: eol
Scanner: ) token on line 47
Scanner: ; token on line 47
  48:       write(x, ' ', '-', ' ', y, ' ', '=', ' ', x - y, eol); 
Scanner: name token on line 48: write
Scanner: ( token on line 48
Scanner: name token on line 48: x
Scanner: , token on line 48
Scanner: char token on line 48: ' '
Scanner: , token on line 48
Scanner: char token on line 48: '-'
Scanner: , token on line 48
Scanner: char token on line 48: ' '
Scanner: , token on line 48
Scanner: name token on line 48: y
Scanner: , token on line 48
Scanner: char token on line 48: ' '
Scanner: , token on line 48
Scanner: char token on line 48: '='
Scanner: , token on line 48
Scanner: char token on line 48: ' '
Scanner: , token on line 48
Scanner: name token on line 48: x
Scanner: - token on line 48
Scanner: name token on line 48: y
Scanner: , token on line 48
Scanner: name token on line 48: eol
Scanner: ) token on line 48
Scanner: ; token on line 48
  49:       write(x, ' ', '*', ' ', y, ' ', '=', ' ', x * y, eol); 
Scanner: name token on line 49: write
Scanner: ( token on line 49
Scanner: name token on line 49: x
Scanner: , token on line 49
Scanner: char token on line 49: ' '
Scanner: , token on line 49
Scanner: char token on line 49: '*'
Scanner: , token on line 49
Scanner: char token on line 49: ' '
Scanner: , token on line 49
Scanner: name token on line 49: y
Scanner: , token on line 49
Scanner: char token on line 49: ' '
Scanner: , token on line 49
Scanner: char token on line 49: '='
Scanner: , token on line 49
Scanner: char token on line 49: ' '
Scanner: , token on line 49
Scanner: name token on line 49: x
Scanner: * token on line 49
Scanner: name token on line 49: y
Scanner: , token on line 49
Scanner: name token on line 49: eol
Scanner: ) token on line 49
Scanner: ; token on line 49
  50:       if y <> 0 then begin 
Scanner: if token on line 50
Scanner: name token on line 50: y
Scanner: <> token on line 50
Scanner: number token on line 50: 0
Scanner: then token on line 50
Scanner: begin token on line 50
  51: 	 write(x, ' ', 'd', 'i', 'v', ' ', y, ' ', '=', ' ', x div y, eol); 
Scanner: name token on line 51: write
Scanner: ( token on line 51
Scanner: name token on line 51: x
Scanner: , token on line 51
Scanner: char token on line 51: ' '
Scanner: , token on line 51
Scanner: char token on line 51: 'd'
Scanner: , token on line 51
Scanner: char token on line 51: 'i'
Scanner: , token on line 51
Scanner: char token on line 51: 'v'
Scanner: , token on line 51
Scanner: char token on line 51: ' '
Scanner: , token on line 51
Scanner: name token on line 51: y
Scanner: , token on line 51
Scanner: char token on line 51: ' '
Scanner: , token on line 51
Scanner: char token on line 51: '='
Scanner: , token on line 51
Scanner: char token on line 51: ' '
Scanner: , token on line 51
Scanner: name token on line 51: x
Scanner: div token on line 51
Scanner: name token on line 51: y
Scanner: , token on line 51
Scanner: name token on line 51: eol
Scanner: ) token on line 51
Scanner: ; token on line 51
  52: 	 write(x, ' ', 'm', 'o', 'd', ' ', y, ' ', '=', ' ', x mod y, eol); 
Scanner: name token on line 52: write
Scanner: ( token on line 52
Scanner: name token on line 52: x
Scanner: , token on line 52
Scanner: char token on line 52: ' '
Scanner: , token on line 52
Scanner: char token on line 52: 'm'
Scanner: , token on line 52
Scanner: char token on line 52: 'o'
Scanner: , token on line 52
Scanner: char token on line 52: 'd'
Scanner: , token on line 52
Scanner: char token on line 52: ' '
Scanner: , token on line 52
Scanner: name token on line 52: y
Scanner: , token on line 52
Scanner: char token on line 52: ' '
Scanner: , token on line 52
Scanner: char token on line 52: '='
Scanner: , token on line 52
Scanner: char token on line 52: ' '
Scanner: , token on line 52
Scanner: name token on line 52: x
Scanner: mod token on line 52
Scanner: name token on line 52: y
Scanner: , token on line 52
Scanner: name token on line 52: eol
Scanner: ) token on line 52
Scanner: ; token on line 52
  53:       end 
Scanner: end token on line 53
  54:    end; { Test } 
Scanner: end token on line 54
Scanner: ; token on line 54
  55:  
  56: begin 
Scanner: begin token on line 56
  57:    Test(17, 17);  Test(17, -11);  Test(17, 0); 
Scanner: name token on line 57: test
Scanner: ( token on line 57
Scanner: number token on line 57: 17
Scanner: , token on line 57
Scanner: number token on line 57: 17
Scanner: ) token on line 57
Scanner: ; token on line 57
Scanner: name token on line 57: test
Scanner: ( token on line 57
Scanner: number token on line 57: 17
Scanner: , token on line 57
Scanner: - token on line 57
Scanner: number token on line 57: 11
Scanner: ) token on line 57
Scanner: ; token on line 57
Scanner: name token on line 57: test
Scanner: ( token on line 57
Scanner: number token on line 57: 17
Scanner: , token on line 57
Scanner: number token on line 57: 0
Scanner: ) token on line 57
Scanner: ; token on line 57
  58:    Test(-11, 17);  Test(-11, -11);  Test(17, 0); 
Scanner: name token on line 58: test
Scanner: ( token on line 58
Scanner: - token on line 58
Scanner: number token on line 58: 11
Scanner: , token on line 58
Scanner: number token on line 58: 17
Scanner: ) token on line 58
Scanner: ; token on line 58
Scanner: name token on line 58: test
Scanner: ( token on line 58
Scanner: - token on line 58
Scanner: number token on line 58: 11
Scanner: , token on line 58
Scanner: - token on line 58
Scanner: number token on line 58: 11
Scanner: ) token on line 58
Scanner: ; token on line 58
Scanner: name token on line 58: test
Scanner: ( token on line 58
Scanner: number token on line 58: 17
Scanner: , token on line 58
Scanner: number token on line 58: 0
Scanner: ) token on line 58
Scanner: ; token on line 58
  59:    Test(0, 17);  Test(0, -11);  Test(0, 0); 
Scanner: name token on line 59: test
Scanner: ( token on line 59
Scanner: number token on line 59: 0
Scanner: , token on line 59
Scanner: number token on line 59: 17
Scanner: ) token on line 59
Scanner: ; token on line 59
Scanner: name token on line 59: test
Scanner: ( token on line 59
Scanner: number token on line 59: 0
Scanner: , token on line 59
Scanner: - token on line 59
Scanner: number token on line 59: 11
Scanner: ) token on line 59
Scanner: ; token on line 59
Scanner: name token on line 59: test
Scanner: ( token on line 59
Scanner: number token on line 59: 0
Scanner: , token on line 59
Scanner: number token on line 59: 0
Scanner: ) token on line 59
Scanner: ; token on line 59
  60: end; { TestBinaryNumeric } 
Scanner: end token on line 60
Scanner: ; token on line 60
  61:  
  62:  
  63: begin 
Scanner: begin token on line 63
  64:    TestUnaryBoolean;  TestUnaryNumeric; 
Scanner: name token on line 64: testunaryboolean
Scanner: ; token on line 64
Scanner: name token on line 64: testunarynumeric
Scanner: ; token on line 64
  65:    TestBinaryBoolean;  TestBinaryNumeric; 
Scanner: name token on line 65: testbinaryboolean
Scanner: ; token on line 65
Scanner: name token on line 65: testbinarynumeric
Scanner: ; token on line 65
  66: end. 
Scanner: end token on line 66
Scanner: . token on line 66
Scanner: e-o-f token
